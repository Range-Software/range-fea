#include "action_list.h"
#include "action.h"
#include "application.h"
#include "merge_entity_dialog.h"
#include "solver_manager.h"

ActionList::ActionList(const QList<RAction::Definition> &definitions, QObject *parent)
    : RActionList{definitions,parent}
{
}

void ActionList::processAvailability()
{
    this->getAction(Action::ACTION_MODEL_SAVE)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_SAVE_AS)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_EXPORT_MSH)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_EXPORT_RAW)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_EXPORT_STL_ASCII)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_EXPORT_STL_BINARY)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_CLOSE)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_RELOAD_RESULTS)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_DROP_RESULTS)->setEnabled(false);
    this->getAction(Action::ACTION_MODEL_RENAME)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_UNDO)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_REDO)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_POINT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_LINE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_TRIANGLE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_QUADRILATERAL)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_CIRCLE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_ELLIPSE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_TETRAHEDRON)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_HEXAHEDRON)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_CYLINDER)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_SPHERE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DRAW_RAW)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_CREATE_ELEMENT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_FIND_SLIVER_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_FIX_SLIVER_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_FIND_INTERSECTED_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_BREAK_INTERSECTED_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_BOOL_UNION)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_BOOL_DIFFERENCE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_BOOL_INTERSECTION)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_MERGE_NEAR_NODES)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_MOVE_NODE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_REMOVE_NODE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_REMOVE_NODE_AND_CLOSE_HOLE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_REMOVE_ELEMENT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_LINE_GENERATE_FROM_EDGES)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SURFACE_MARK)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SURFACE_SWAP_ELEMENT_NORMAL)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SURFACE_SWAP_NORMALS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SURFACE_SYNC_NORMALS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SURFACE_CLOSE_HOLE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SURFACE_COARSEN)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_VECTOR_FIELD_CREATE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_VECTOR_FIELD_EDIT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SCALAR_FIELD_CREATE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_SCALAR_FIELD_EDIT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_STREAM_LINE_CREATE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_STREAM_LINE_EDIT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_CUT_CREATE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_CUT_EDIT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_ISO_CREATE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_ISO_EDIT)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_ENTITY_MERGE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_ENTITY_REMOVE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_TRANSFORM)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_VOLUME_GENERATE_TETRAHEDRA)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_EXPORT_SLIVER_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_EXPORT_INTERSECTED_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_PURGE_UNUSED_NODES)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_PURGE_UNUSED_ELEMENTS)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_POINT_INSIDE_SURFACE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_TETRAHEDRALIZE_SURFACE)->setEnabled(false);
    this->getAction(Action::ACTION_GEOMETRY_DEV_CONSOLIDATE)->setEnabled(false);
    this->getAction(Action::ACTION_PROBLEM_TASK_FLOW)->setEnabled(false);
    this->getAction(Action::ACTION_PROBLEM_SOLVER_SETUP)->setEnabled(false);
    this->getAction(Action::ACTION_PROBLEM_DEFINE_MONITORING_POINTS)->setEnabled(false);
    this->getAction(Action::ACTION_PROBLEM_RESET)->setEnabled(false);
    this->getAction(Action::ACTION_SOLVER_START)->setEnabled(false);
    this->getAction(Action::ACTION_SOLVER_STOP)->setEnabled(false);
    this->getAction(Action::ACTION_SOLVER_KILL)->setEnabled(false);
    this->getAction(Action::ACTION_REPORT_MODEL_STATISTICS)->setEnabled(false);
    this->getAction(Action::ACTION_REPORT_SOLVER_LOG)->setEnabled(false);
    this->getAction(Action::ACTION_REPORT_CONVERGENCE_GRAPH)->setEnabled(false);
    this->getAction(Action::ACTION_REPORT_MONITORING_POINT_GRAPH)->setEnabled(false);
    this->getAction(Action::ACTION_REPORT_CREATE_REPORT)->setEnabled(false);

    this->getAction(Action::ACTION_GEOMETRY_UNDO)->setDisabled(!Application::instance()->getSession()->isUndoAvailable());
    this->getAction(Action::ACTION_GEOMETRY_UNDO)->setToolTip(Application::instance()->getSession()->getUndoTooltip());
    this->getAction(Action::ACTION_GEOMETRY_REDO)->setDisabled(!Application::instance()->getSession()->isRedoAvailable());
    this->getAction(Action::ACTION_GEOMETRY_REDO)->setToolTip(Application::instance()->getSession()->getRedoTooltip());

    QList<uint> selectedModelIDs = Application::instance()->getSession()->getSelectedModelIDs();
    if (!selectedModelIDs.empty())
    {
        this->getAction(Action::ACTION_MODEL_SAVE)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_SAVE_AS)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_EXPORT_MSH)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_EXPORT_RAW)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_EXPORT_STL_ASCII)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_EXPORT_STL_BINARY)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_CLOSE)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_RELOAD_RESULTS)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_DROP_RESULTS)->setEnabled(true);
        this->getAction(Action::ACTION_MODEL_RENAME)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_POINT)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_LINE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_TRIANGLE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_QUADRILATERAL)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_CIRCLE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_ELLIPSE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_TETRAHEDRON)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_HEXAHEDRON)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_CYLINDER)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_SPHERE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DRAW_RAW)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_CREATE_ELEMENT)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_FIND_SLIVER_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_FIX_SLIVER_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_FIND_INTERSECTED_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_BREAK_INTERSECTED_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_BOOL_UNION)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_BOOL_DIFFERENCE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_BOOL_INTERSECTION)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_MERGE_NEAR_NODES)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_MOVE_NODE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_REMOVE_NODE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_REMOVE_NODE_AND_CLOSE_HOLE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_REMOVE_ELEMENT)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_LINE_GENERATE_FROM_EDGES)->setEnabled(Session::selectedModelsHasEntities(R_ENTITY_GROUP_SURFACE));
        this->getAction(Action::ACTION_GEOMETRY_SURFACE_MARK)->setEnabled(Session::selectedModelsHasEntities(R_ENTITY_GROUP_SURFACE));
        this->getAction(Action::ACTION_GEOMETRY_SURFACE_SWAP_ELEMENT_NORMAL)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_SURFACE_SWAP_NORMALS)->setEnabled(Session::selectedModelsHasEntities(R_ENTITY_GROUP_SURFACE));
        this->getAction(Action::ACTION_GEOMETRY_SURFACE_SYNC_NORMALS)->setEnabled(Session::selectedModelsHasEntities(R_ENTITY_GROUP_SURFACE));
        this->getAction(Action::ACTION_GEOMETRY_SURFACE_CLOSE_HOLE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_SURFACE_COARSEN)->setEnabled(Session::selectedModelsHasEntities(R_ENTITY_GROUP_SURFACE));
        this->getAction(Action::ACTION_GEOMETRY_VECTOR_FIELD_CREATE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_VECTOR_FIELD_EDIT)->setEnabled(Session::selectedModelsHasEntitySelected(R_ENTITY_GROUP_VECTOR_FIELD));
        this->getAction(Action::ACTION_GEOMETRY_SCALAR_FIELD_CREATE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_SCALAR_FIELD_EDIT)->setEnabled(Session::selectedModelsHasEntitySelected(R_ENTITY_GROUP_SCALAR_FIELD));
        this->getAction(Action::ACTION_GEOMETRY_STREAM_LINE_CREATE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_STREAM_LINE_EDIT)->setEnabled(Session::selectedModelsHasEntitySelected(R_ENTITY_GROUP_STREAM_LINE));
        this->getAction(Action::ACTION_GEOMETRY_CUT_CREATE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_CUT_EDIT)->setEnabled(Session::selectedModelsHasEntitySelected(R_ENTITY_GROUP_CUT));
        this->getAction(Action::ACTION_GEOMETRY_ISO_CREATE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_ISO_EDIT)->setEnabled(Session::selectedModelsHasEntitySelected(R_ENTITY_GROUP_ISO));
        this->getAction(Action::ACTION_GEOMETRY_ENTITY_MERGE)->setEnabled(MergeEntityDialog::entitiesSelected());
        this->getAction(Action::ACTION_GEOMETRY_ENTITY_REMOVE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_TRANSFORM)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_VOLUME_GENERATE_TETRAHEDRA)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_EXPORT_SLIVER_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_EXPORT_INTERSECTED_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_PURGE_UNUSED_NODES)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_PURGE_UNUSED_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_REMOVE_DUPLICATE_NODES)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_REMOVE_DUPLICATE_ELEMENTS)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_POINT_INSIDE_SURFACE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_TETRAHEDRALIZE_SURFACE)->setEnabled(true);
        this->getAction(Action::ACTION_GEOMETRY_DEV_CONSOLIDATE)->setEnabled(true);
        this->getAction(Action::ACTION_PROBLEM_TASK_FLOW)->setEnabled(true);
        this->getAction(Action::ACTION_PROBLEM_SOLVER_SETUP)->setEnabled(true);
        this->getAction(Action::ACTION_PROBLEM_DEFINE_MONITORING_POINTS)->setEnabled(true);
        this->getAction(Action::ACTION_PROBLEM_RESET)->setEnabled(true);
        this->getAction(Action::ACTION_SOLVER_START)->setEnabled(true);
        this->getAction(Action::ACTION_REPORT_MODEL_STATISTICS)->setEnabled(true);
        this->getAction(Action::ACTION_REPORT_SOLVER_LOG)->setEnabled(true);
        this->getAction(Action::ACTION_REPORT_CONVERGENCE_GRAPH)->setEnabled(true);
        this->getAction(Action::ACTION_REPORT_MONITORING_POINT_GRAPH)->setEnabled(true);
        this->getAction(Action::ACTION_REPORT_CREATE_REPORT)->setEnabled(true);
    }

    if (SolverManager::getInstance().getNRunning() > 0)
    {
        this->getAction(Action::ACTION_SOLVER_STOP)->setEnabled(true);
        this->getAction(Action::ACTION_SOLVER_KILL)->setEnabled(true);
    }
}
